{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww19060\viewh20060\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Benjamin Fondell\
fondellb@oregonstate.edu\
Assignment 2 Part 2\
Due: April 23rd 2017\
\
\
1. Cost of performing 32 consecutive push operations on an empty array with starting capacity of 8. Array doubles when resize.\
\
\ul Push\ulnone 			\ul Cost\
\ulnone \
1			1\
2			1\
3			1\
4			1\
5			1\
6			1\
7			1\
8			1\
9			9 =  (8+1)\
10			1\
11			1\
12			1\
13			1\
14			1\
15			1\
16			1\
17			17 = (16+1)\
18			1\
19			1\
20			1\
21			1\
22			1\
23			1\
24			1\
25			1\
26			1\
27			1\
28			1\
29			1\
30			1\
31			1\
32			1\
\
Total cost units for 32 consecutive pushes: 56 \
\
Time complexity of a push operation: 0(l)+\
\
2.Cost of performing 32 consecutive push operations on an empty array with starting capacity of 8. Array adds 2 to capacity on resize. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Push\ulnone 			\ul Cost\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone 1			1\
2			1\
3			1\
4			1\
5			1\
6			1\
7			1\
8			1\
9			9 =  (8+1)\
10			1\
11			11 = (10 +1)\
12			1\
13			13 = (12 +1)\
14			1\
15			15 = (14 +1)\
16			1\
17			17 = (16 +1)\
18			1\
19			19 = (18+1)\
20			1\
21			21 = (20 +1)\
22			1\
23			23 = (22 +1)\
24			1\
25			25 = (24 +1)\
26			1\
27			27 = (26 + 1)\
28			1\
29			29 = (28 +1)\
30			1\
31			31 = (30 +1)\
32			1\
\
Total cost units for 32 consecutive pushes: 260 \
\
Time complexity of a push operation: 0(n)\
\
3.\
 Push values until capacity must resize and double. Then pop a value off the stack. The size will drop below half of capacity thus, the capacity will be divided in half. This will result in poor performance of O(N^2).\
\
I would adjust the array\'92s shrinking policy by only halving the capacity during a pop operation if the size drops below one quarter of the capacity. This allows space in the array for pop operations without producing poor performance and without taking up too much memory for a large capacity array. \
\
\
\
\
\
\
}